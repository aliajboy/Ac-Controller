#include <Arduino.h>
#include <WiFi.h>
#include <AsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <OneWire.h>
#include <DallasTemperature.h>
#include <ArduinoOTA.h>
#include <ArduinoJson.h>

// Network credentials
const char *ssid = "X21-2.4G";
const char *password = "aliajboy1999";

// Static IP configuration
IPAddress local_IP(192, 168, 0, 100);
IPAddress gateway(192, 168, 0, 1);
IPAddress subnet(255, 255, 255, 0);

// Default Temperature Thresholds
String maxTempInput = "27.5";  // AC turns ON above this
String minTempInput = "26.0";  // AC turns OFF below this
String lastTemperature;

// AC state and manual override
bool acState = false;
// bool manualOverride = false;

// HTML web page with automatic refresh
const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE HTML>
<html dir="rtl" lang="fa-IR">

<head>
    <title>کنترل دما و کولر</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta charset="UTF-8">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        @font-face {
            font-family: "IRANSansWebFaNum";
            font-style: normal;
            font-weight: 400;
            src: url(data:application/octet-stream;base64,);
        }

        body {
            font-family: "IRANSansWebFaNum", sans-serif;
        }
    </style>
</head>

<body>
    <div class="container mt-5">
        <h1 class="text-center">کنترل دما و کولر</h1>
        <div class="card mt-3">
            <div class="card-body">
                <h2 id="currentTemp"></h2>
                <p class="fs-4 fw-bold">وضعیت کولر: <span class="badge" id="acState"></span></p>
                <button type="button" class="btn btn-warning fw-bold" id="overrideButton"></button>
            </div>
        </div>

        <div class="card mt-3">
            <div class="card-body">
                <h2>تنظیمات</h2>
                <form id="settempform" class="row">
                    <div class="col-6">
                        <div class="mb-3">
                            <label class="form-label fw-bold fs-5">حداکثر دما</label>
                            <input type="number" step="0.1" class="form-control" id="maxTemp" required>
                        </div>
                    </div>
                    <div class="col-6">
                        <div class="mb-3">
                            <label class="form-label fw-bold fs-5">حداقل دما</label>
                            <input type="number" step="0.1" class="form-control" id="minTemp" required>
                        </div>
                    </div>
                    <div class="col-12 d-flex justify-content-center align-items-center">
                        <button type="submit" class="btn btn-primary fw-bold flex-fill">ذخیره</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const currentTempEl = document.getElementById('currentTemp');
            const maxTempEl = document.getElementById('maxTemp');
            const minTempEl = document.getElementById('minTemp');
            const acStateEl = document.getElementById('acState');
            const overrideButtonEl = document.getElementById('overrideButton');

            fetch('/getdata')
                .then(response => response.json())
                .then(data => {
                    const { currentTemp, tempMax, tempMin, ACState } = data;

                    currentTempEl.innerHTML = `دما : ${currentTemp} درجه سانتی‌گراد`;
                    maxTempEl.value = tempMax;
                    minTempEl.value = tempMin;

                    // Show/Hide Override Button
                    if (currentTemp >= tempMin) {
                        overrideButtonEl.innerHTML = ACState ? "خاموش کردن" : "روشن کردن";
                        overrideButtonEl.classList.remove("d-none");

                        // Add onclick event based on ACState
                        overrideButtonEl.onclick = () => {
                            const url = ACState ? '/turnoff' : '/turnon';
                            fetch(url)
                                .then(res => {
                                    if (!res.ok) throw new Error('درخواست ناموفق بود');
                                    window.location.reload();
                                })
                                .catch(err => {
                                    console.error("خطا در تغییر وضعیت کولر:", err);
                                    window.location.reload();
                                });
                        };
                    } else {
                        overrideButtonEl.classList.add("d-none");
                        overrideButtonEl.onclick = null;
                    }

                    // Set AC State Badge
                    acStateEl.innerHTML = ACState ? "روشن" : "خاموش";
                    acStateEl.classList.remove("text-bg-success", "text-bg-danger");
                    acStateEl.classList.add(ACState ? "text-bg-success" : "text-bg-danger");
                })
                .catch(error => {
                    console.error("خطا در دریافت داده‌ها:", error);
                });
        });

        document.getElementById('settempform').addEventListener('submit', function (e) {
            e.preventDefault();

            const tempMin = parseFloat(document.getElementById('minTemp').value);
            const tempMax = parseFloat(document.getElementById('maxTemp').value);

            fetch('/settemps', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ tempMin, tempMax })
            })
                .then(response => {
                    if (!response.ok) throw new Error('خطا در ارسال اطلاعات');
                    return response.json();
                })
                .then(result => {
                    window.location.reload();
                })
                .catch(error => {
                    console.error("خطا:", error);
                    window.location.reload();
                });
        });

    </script>
</body>

</html>
)rawliteral";

AsyncWebServer server(80);

// GPIO pins
const int output = 4;       // AC control pin
const int oneWireBus = 18;  // DS18B20 data pin

OneWire oneWire(oneWireBus);
DallasTemperature sensors(&oneWire);

// Function declarations
void connectToWiFi();

void connectToWiFi() {
  if (WiFi.status() == WL_CONNECTED) return;

  WiFi.disconnect();
  delay(100);
  WiFi.config(local_IP, gateway, subnet);
  WiFi.begin(ssid, password);

  Serial.print("Connecting to WiFi");
  unsigned long startAttemptTime = millis();

  while (WiFi.status() != WL_CONNECTED && millis() - startAttemptTime < 10000) {
    delay(500);
    Serial.print(".");
  }

  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\nConnected! IP: " + WiFi.localIP().toString());
  } else {
    Serial.println("\nFailed to connect - will retry later");
  }
}

void setup() {
  // Initialize Serail
  Serial.begin(115200);
  delay(1000);

  // Initialize Pin Modes
  pinMode(output, OUTPUT);
  digitalWrite(output, LOW);
  sensors.begin();

  // Connect to WiFi
  connectToWiFi();

  // Initial temperature reading and Set AC Power ON or OFF
  sensors.requestTemperatures();
  lastTemperature = String(sensors.getTempCByIndex(0), 1);
  acState = (lastTemperature.toFloat() > maxTempInput.toFloat());
  digitalWrite(output, acState ? HIGH : LOW);

  // Web server routes
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request) {
    request->send_P(200, "text/html", index_html);
  });

  server.on("/getdata", HTTP_GET, [](AsyncWebServerRequest *request) {
    // Create a JSON object
    DynamicJsonDocument doc(256);
    doc["tempMin"] = minTempInput;
    doc["tempMax"] = maxTempInput;
    doc["ACState"] = acState;
    doc["currentTemp"] = lastTemperature;

    // Convert JSON object to string
    String jsonString;
    serializeJson(doc, jsonString);

    // Send response
    request->send(200, "application/json", jsonString);
  });

  server.on(
    "/settemps", HTTP_POST, [](AsyncWebServerRequest *request) {},
    NULL,
    [](AsyncWebServerRequest *request, uint8_t *data, size_t len, size_t index, size_t total) {
      // Deserialize JSON
      DynamicJsonDocument doc(256);
      DeserializationError error = deserializeJson(doc, data, len);

      if (error) {
        request->send(400, "application/json", "{\"error\":\"Invalid JSON\"}");
        return;
      }

      // Extract values
      if (doc.containsKey("tempMin") && doc.containsKey("tempMax")) {
        String tempMin = doc["tempMin"].as<String>();
        String tempMax = doc["tempMax"].as<String>();

        // Update global values
        minTempInput = tempMin;
        maxTempInput = tempMax;

        Serial.println("Updated Min/Max Temp: " + minTempInput + " / " + maxTempInput);

        request->send(200, "application/json", "{\"status\":\"success\"}");
      } else {
        request->send(400, "application/json", "{\"error\":\"Missing fields\"}");
      }
    });

  server.on("/turnon", HTTP_GET, [](AsyncWebServerRequest *request) {
    acState = true;
    // manualOverride = true;
    digitalWrite(output, HIGH);
  });

  server.on("/turnoff", HTTP_GET, [](AsyncWebServerRequest *request) {
    acState = false;
    // manualOverride = true;
    digitalWrite(output, LOW);
  });

  ArduinoOTA.begin();

  ArduinoOTA.onStart([]() {
    Serial.println("OTA Starts");
  });
  ArduinoOTA.onEnd([]() {
    Serial.println("OTA Ends");
  });
  ArduinoOTA.onProgress([](unsigned int progress, unsigned int total) {
    // Nothing
  });

  server.begin();
}

void loop() {
  static unsigned long lastTempCheck = 0;
  static unsigned long lastWifiAttempt = 0;

  // Temperature control (works offline)
  if (millis() - lastTempCheck >= 5000) {
    lastTempCheck = millis();
    sensors.requestTemperatures();
    lastTemperature = String(sensors.getTempCByIndex(0), 1);

    float temp = lastTemperature.toFloat();
    if (temp >= maxTempInput.toFloat() && !acState) {
      acState = true;
      digitalWrite(output, HIGH);
    } else if (temp <= minTempInput.toFloat() && acState) {
      acState = false;
      digitalWrite(output, LOW);
    }
    // if (!manualOverride) {
    //   float temp = lastTemperature.toFloat();
    //   if (temp >= maxTempInput.toFloat() && !acState) {
    //     acState = true;
    //     digitalWrite(output, HIGH);
    //   } else if (temp <= minTempInput.toFloat() && acState) {
    //     acState = false;
    //     digitalWrite(output, LOW);
    //   }
    // } else {
    //   if (lastTemperature.toFloat() >= maxTempInput.toFloat() || lastTemperature.toFloat() <= minTempInput.toFloat()) {
    //     manualOverride = false;
    //   }
    // }
  }

  // WiFi maintenance (tries every 30 seconds)
  if (millis() - lastWifiAttempt >= 30000) {
    lastWifiAttempt = millis();
    connectToWiFi();
  }

  // Handle OTA if connected
  if (WiFi.status() == WL_CONNECTED) {
    ArduinoOTA.handle();
  }

  delay(10);
}